// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @unique
  name     String
  imageUrl String
  email    String

  testSessions TestSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  overallDuration String

  sectionDuration String[]
  sections        String[]

  testSessions                  TestSession[]
  Questions                     Question[]
  multipleChoiceQuestions       MultipleChoiceQuestion[]
  multipleAnswerQuestions       MultipleAnswerQuestion[]
  readingComprehensionQuestions ReadingComprehensionQuestion[]
  quantitativeQuestions         QuantitativeQuestion[]
}

model TestSession {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId         String   @db.ObjectId
  testId            String   @db.ObjectId
  duration          String
  startTime         DateTime
  endTime           DateTime
  sectionEndTimes   String[]
  incompleteSection String   @default("AnalyticalWriting")
  currentSection    String   @default("AnalyticalWriting")
  currentQuestion   Int      @default(0)
  finished          Boolean  @default(false)

  sessionAnswers Json

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  test    Test    @relation(fields: [testId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionType {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  type String

  questions                     Question[]
  multipleChoiceQuestions       MultipleChoiceQuestion[]
  multipleAnswerQuestions       MultipleAnswerQuestion[]
  readingComprehensionQuestions ReadingComprehensionQuestion[]
  quantitativeQuestions         QuantitativeQuestion[]
}

model ReadingComprehensionQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  typeId        String   @db.ObjectId
  testId        String   @db.ObjectId
  correctAnswer Int[]
  correctSentence  String[]
  questionText  String
  options       String[]
  section       String
  paragraph     String

  highlighted         Boolean?
  select              Boolean?
  highlightedSentence String?
  option              Int?

  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionType QuestionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model MultipleAnswerQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  typeId        String   @db.ObjectId
  testId        String   @db.ObjectId
  correctAnswer Int[]
  questionText  String
  options       String[]
  section       String

  blankType      String?
  numberOfBlanks Int?
  blankOptions   String[]
  option         Int?

  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionType QuestionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model MultipleChoiceQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  typeId        String   @db.ObjectId
  testId        String   @db.ObjectId
  correctAnswer Int[]
  questionText  String
  options       String[]
  section       String

  image  Boolean?
  option Int?

  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionType QuestionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model QuantitativeQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  typeId        String   @db.ObjectId
  testId        String   @db.ObjectId
  correctAnswer Int[]
  questionText  String
  options       String[]
  section       String

  Quantity1 String
  Quantity2 String
  option    Int?

  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionType QuestionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  typeId        String   @db.ObjectId
  testId        String   @db.ObjectId
  questionText  String
  options       String[]
  correctAnswer Int[]
  section       String
  paragraph     String

  highlighted         Boolean?
  blankType           String?
  select              Boolean?
  image               Boolean?
  option              Int?
  numberOfBlanks      Int?
  blankOptions        String[]
  highlightedSentence String?

  test         Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionType QuestionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}
